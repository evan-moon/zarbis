{"version":3,"sources":["models/Weather/Types.ts","models/Weather/index.ts","assets/default-background.jpg","constants.ts","utils/localStorage.ts","hooks/useStateWithLocalCache.ts","hooks/useGeoLocation.ts","utils/getCurrentPosition.ts","api/APICore.ts","api/APIAirQuality.ts","hooks/useIntervalEffect.ts","hooks/useAirQuality.ts","api/APIOpenWeather.ts","hooks/useCurrentWeather.ts","hooks/useForecastWeathers.ts","hooks/useWeatherPhoto.ts","components/Background.tsx","components/Widgets/Widget.tsx","utils/getCssPosition.ts","components/Widgets/Clock.tsx","components/WeatherIcon.tsx","components/Widgets/Weather/ForecastGraph.tsx","components/Widgets/Weather/index.tsx","utils/convertTemperature.ts","components/Widgets/AirQuality.tsx","utils/getAirQualityName.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["WeatherType","module","exports","Position","TemperatureUnit","AirQualityName","OPEN_WEATHER_API_KEY","process","REACT_APP_OPEN_WEATHER_API_KEY","AQI_API_KEY","REACT_APP_AQI_API_KEY","WEATHER_REFRESH_INTERVAL","CURRENT_WEATHER_CACHE_EXPIRY","FORECAST_WEATHERS_CACHE_EXPIRY","AQI_CACHE_EXPIRY","canUseLocalStorage","window","localStorage","useStateWithLocalCache","initialValue","cacheKey","expiry","useState","key","console","error","rawData","getItem","data","JSON","parse","now","Date","isBefore","value","getLocalStorageData","state","setState","useCallback","newState","toISOString","setItem","stringify","setLocalStorageData","addSeconds","undefined","GEO_LOCATION_STORAGE_KEY","useGeoLocation","geoLocation","setGeoLocation","useEffect","a","async","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","e","maximumAge","timeout","convertedPosition","coords","latitude","longitude","accuracy","altitude","altitudeAccuracy","heading","speed","timestamp","APICore","options","token","axios","this","create","uri","params","get","lat","lon","_get","aqi","baseURL","useIntervalEffect","fn","intervalTime","interval","setInterval","clearInterval","AQI_STORAGE_KEY","appid","response","CURRENT_WEATHER_STORAGE_KEY","FORECAST_WEATHERS_STORAGE_KEY","BackgroundWrapper","styled","div","BackgroundImage","img","Background","weatherData","weather","photo","weatherType","dayNight","getHours","avilablePhotos","useMemo","weatherPhotos","filter","hasWeather","weathers","some","isMatchedDayNight","dn","randomCount","Math","floor","random","length","image","DefaultImage","useWeatherPhoto","type","category","알수없음","windowWidth","innerWidth","src","Wrapper","horizontal","vertical","Center","css","Left","Right","Top","Bottom","getCssPosition","Inner","Widget","children","HourAndSecondView","Colon","span","show","DateView","ClockWidget","showDate","time","setTime","hours","format","minutes","formattedDate","isShowColon","getSeconds","Icon","WeatherIcon","icon","ForecastGraph","setWeathers","fetchForecastWeathers","APIOpenWeather","fetchForecastWeathersByGeoLocation","forcastWeathers","daily","map","temp","dt","max","min","date","useForecastWeathers","todayWeather","maxTempDiff","reduce","result","diff","abs","getGraphHeight","isNegative","index","height","Graph","WeatherView","LocationView","TooltipDescription","WeatherWidget","onChangeWeather","setWeather","fetchWeatherData","fetchCurrentWeatherByGeoLocation","city","name","country","sys","main","weatherCodes","String","id","useCurrentWeather","showDescription","setShowDescription","currentCelsiusTemp","unit","Celsius","round","Fahrenheit","Infinity","onMouseEnter","onMouseLeave","description","QualityTitle","QualityValue","QualityName","AirQualityWidget","setAqi","fetchAirQuality","APIAirQuality","useAirQuality","qualityName","Good","Normal","Caution","Bad","VeryBad","Danger","getAirQualityName","Padding","DisplayBox","App","currentWeather","setCurrentWeather","handleChangeWeather","className","Clock","AirQuality","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b9604dc5.chunk.js","sourcesContent":["export enum WeatherType {\n  천둥번개 = '천둥번개',\n  이슬비 = '이슬비',\n  비 = '비',\n  눈 = '눈',\n  안개 = '안개',\n  맑음 = '맑음',\n  구름 = '구름',\n  알수없음 = '알수없음',\n}\n\nexport interface WeatherCodeType {\n  category: WeatherType;\n  description: string;\n}\n\nexport interface WeatherCodeTypeMap {\n  [key: string]: WeatherCodeType;\n}\n","export * from './Data';\nexport * from './Photos';\nexport * from './Types';\n","module.exports = __webpack_public_path__ + \"static/media/default-background.b8731b73.jpg\";","export const OPEN_WEATHER_API_KEY = process.env.REACT_APP_OPEN_WEATHER_API_KEY;\nexport const AQI_API_KEY = process.env.REACT_APP_AQI_API_KEY;\n\nexport const WEATHER_REFRESH_INTERVAL = 1000 * 60 * 60; // ms\nexport const CURRENT_WEATHER_CACHE_EXPIRY = 60 * 30; // s\nexport const FORECAST_WEATHERS_CACHE_EXPIRY = 60 * 30; // s\nexport const AQI_CACHE_EXPIRY = 60 * 30; // s\n\nexport enum Position {\n  Top = 'TOP',\n  Bottom = 'Bottom',\n  Left = 'LEFT',\n  Right = 'RIGHT',\n  Center = 'CENTER',\n}\n\nexport enum TemperatureUnit {\n  Celsius = 'CELSIUS',\n  Fahrenheit = 'FAHRENHEIT',\n  Kelvin = 'KELVIN',\n}\n\nexport enum AirQualityName {\n  Good = 'GOOD',\n  Normal = 'NORMAL',\n  Caution = 'CAUTION',\n  Bad = 'BAD',\n  VeryBad = 'VERY_BAD',\n  Danger = 'DANGER',\n}\n","import { isBefore } from 'date-fns';\n\nconst canUseLocalStorage = () => window.localStorage != null;\n\nexport function getLocalStorageData<T = unknown>(key: string): T | null {\n  if (!canUseLocalStorage) {\n    console.error('localstorage is not supported');\n    return null;\n  }\n\n  const rawData = window.localStorage.getItem(key);\n  if (rawData == null) {\n    return null;\n  }\n\n  const data = JSON.parse(rawData!);\n  if (data.expiry) {\n    const now = new Date();\n    const expiry = new Date(data.expiry);\n    return isBefore(now, expiry) ? data.value : null;\n  } else {\n    return data.value;\n  }\n}\n\nexport function setLocalStorageData<T = any>(key: string, value: T, expiry?: Date) {\n  if (!canUseLocalStorage) {\n    console.error('localstorage is not supported');\n    return;\n  }\n\n  const data = {\n    value,\n    ...(() => (expiry ? { expiry: expiry.toISOString() } : {}))(),\n  };\n\n  return window.localStorage.setItem(key, JSON.stringify(data));\n}\n","import { useState, useCallback } from 'react';\nimport { getLocalStorageData, setLocalStorageData } from 'src/utils/localStorage';\nimport { addSeconds } from 'date-fns';\n\n/**\n * @desc 상태를 로컬스토리지에 캐싱하고, expiry(초)의 만료기간을 부여한다. 만약 훅이 호출되었을 때 캐시가 남아있다면 캐싱된 값을 반환한다.\n */\nexport function useStateWithLocalCache<T>(initialValue: T, cacheKey: string, expiry?: number): [T, (s: T) => void] {\n  const [state, setState] = useState(getLocalStorageData<T>(cacheKey) ?? initialValue);\n\n  const setStateWithCache = useCallback(\n    (newState: T) => {\n      setState(newState);\n      setLocalStorageData(cacheKey, newState, expiry ? addSeconds(new Date(), expiry) : undefined);\n    },\n    [cacheKey, expiry]\n  );\n\n  return [state, setStateWithCache];\n}\n","import { useEffect } from 'react';\nimport { getCurrentPosition } from 'src/utils/getCurrentPosition';\nimport { useStateWithLocalCache } from './useStateWithLocalCache';\n\nconst GEO_LOCATION_STORAGE_KEY = 'geoLocation';\nexport function useGeoLocation() {\n  const [geoLocation, setGeoLocation] = useStateWithLocalCache<Position | null>(null, GEO_LOCATION_STORAGE_KEY);\n\n  useEffect(() => {\n    (async () => {\n      if (geoLocation) {\n        return;\n      }\n      try {\n        const position = await getCurrentPosition();\n        if (position) {\n          // @NOTE Position객체를 Stringify하면 빈 객체인 것처럼 평가되기 때문에, Position 객체의 속성을 가진 객체를 만들어서 캐싱에 사용해야함\n          const convertedPosition = {\n            coords: {\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude,\n              accuracy: position.coords.accuracy,\n              altitude: position.coords.altitude,\n              altitudeAccuracy: position.coords.altitudeAccuracy,\n              heading: position.coords.heading,\n              speed: position.coords.speed,\n            },\n            timestamp: position.timestamp,\n          };\n          setGeoLocation(convertedPosition);\n        }\n      } catch (e) {\n        throw e;\n      }\n    })();\n  }, [geoLocation, setGeoLocation]);\n\n  return geoLocation;\n}\n","export function getCurrentPosition(): Promise<Position | null> {\n  return new Promise((resolve, reject) => {\n    if (window.navigator == null || window.navigator.geolocation == null) {\n      reject('geolocation API is not supported');\n    }\n    navigator.geolocation.getCurrentPosition(\n      position => resolve(position),\n      e => reject(e),\n      {\n        maximumAge: 60000,\n        timeout: 7000,\n      }\n    );\n  });\n}\n","import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport class APICore {\n  protected token: string = '';\n  private axios: AxiosInstance;\n\n  constructor(options: AxiosRequestConfig = {}, token = '') {\n    this.token = token;\n    this.axios = axios.create(options);\n  }\n  async _get(uri: string, params: any) {\n    try {\n      return await this.axios.get(uri, { params });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n}\n","import { AxiosRequestConfig } from 'axios';\nimport { APICore } from 'src/api/APICore';\nimport { AQI_API_KEY } from 'src/constants';\nimport { AqiData, AqiDataResponse, Coords } from 'src/models';\n\nclass APIAirQuality extends APICore {\n  constructor(options: AxiosRequestConfig = {}, key = '') {\n    super(options, key);\n  }\n\n  async fetchAirQuality({ lat, lon }: Coords): Promise<AqiData> {\n    const { aqi }: AqiDataResponse = (await this._get(`/feed/geo:${lat};${lon}/`, { token: this.token })).data.data;\n    return {\n      aqi,\n    };\n  }\n}\n\nexport default new APIAirQuality(\n  {\n    baseURL: 'https://api.waqi.info',\n  },\n  AQI_API_KEY\n);\n","import { useEffect } from 'react';\n\nexport function useIntervalEffect(fn: () => void, intervalTime: number) {\n  useEffect(() => {\n    const interval = setInterval(fn, intervalTime);\n    return () => clearInterval(interval);\n  }, [fn, intervalTime]);\n}\n","import { useEffect, useCallback } from 'react';\nimport { useGeoLocation } from './useGeoLocation';\nimport APIAirQuality from 'src/api/APIAirQuality';\nimport { AqiData } from 'src/models';\nimport { useIntervalEffect } from './useIntervalEffect';\nimport { WEATHER_REFRESH_INTERVAL, AQI_CACHE_EXPIRY as expiry } from 'src/constants';\nimport { useStateWithLocalCache } from './useStateWithLocalCache';\n\nconst AQI_STORAGE_KEY = 'aqi';\nexport function useAirQuality(): AqiData | null {\n  const [aqi, setAqi] = useStateWithLocalCache<AqiData | null>(null, AQI_STORAGE_KEY, expiry);\n  const geoLocation = useGeoLocation();\n\n  const fetchAirQuality = useCallback(async () => {\n    if (!geoLocation) {\n      return;\n    }\n\n    const response = await APIAirQuality.fetchAirQuality({\n      lat: geoLocation.coords.latitude,\n      lon: geoLocation.coords.longitude,\n    });\n    setAqi(response);\n  }, [geoLocation, setAqi]);\n\n  useEffect(() => {\n    if (aqi === null) {\n      fetchAirQuality();\n    }\n  }, [fetchAirQuality, aqi]);\n\n  useIntervalEffect(() => {\n    fetchAirQuality();\n  }, WEATHER_REFRESH_INTERVAL);\n\n  return aqi != null ? aqi : null;\n}\n","import { AxiosRequestConfig } from 'axios';\nimport { APICore } from 'src/api/APICore';\nimport { OPEN_WEATHER_API_KEY } from 'src/constants';\nimport { WeatherDataResponse, Coords, ForecastWeathersDataResponse } from 'src/models';\n\nclass APIOpenWeather extends APICore {\n  constructor(options: AxiosRequestConfig, key = '') {\n    super(options, key);\n  }\n\n  /**\n   * @desc 지정된 좌표의 현재 날씨\n   */\n  async fetchCurrentWeatherByGeoLocation({ lat, lon }: Coords): Promise<WeatherDataResponse> {\n    try {\n      const response: WeatherDataResponse = (await this._get('/weather', { lat, lon, appid: this.token })).data;\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  /**\n   * @desc 지정된 좌표의 다음 7일 동안의 날씨를 1일 간격으로 표시\n   */\n  async fetchForecastWeathersByGeoLocation({ lat, lon }: Coords): Promise<ForecastWeathersDataResponse> {\n    try {\n      const response = (await this._get('/onecall', { lat, lon, appid: this.token })).data;\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n\nexport default new APIOpenWeather(\n  {\n    baseURL: 'https://api.openweathermap.org/data/2.5',\n  },\n  OPEN_WEATHER_API_KEY\n);\n","import { useEffect, useCallback } from 'react';\nimport { useGeoLocation, useStateWithLocalCache } from 'src/hooks';\nimport APIOpenWeather from 'src/api/APIOpenWeather';\nimport { WeatherData, WeatherCodeTypeMap } from 'src/models/Weather';\nimport weatherCodes from 'src/assets/weather-codes.json';\nimport { useIntervalEffect } from './useIntervalEffect';\nimport { WEATHER_REFRESH_INTERVAL, CURRENT_WEATHER_CACHE_EXPIRY as expiry } from 'src/constants';\n\nconst CURRENT_WEATHER_STORAGE_KEY = 'current_weather';\nexport function useCurrentWeather(): WeatherData | null {\n  const [weather, setWeather] = useStateWithLocalCache<WeatherData | null>(null, CURRENT_WEATHER_STORAGE_KEY, expiry);\n  const geoLocation = useGeoLocation();\n\n  const fetchWeatherData = useCallback(async () => {\n    if (!geoLocation) {\n      return;\n    }\n\n    const response = await APIOpenWeather.fetchCurrentWeatherByGeoLocation({\n      lat: geoLocation.coords.latitude,\n      lon: geoLocation.coords.longitude,\n    });\n    const weather = response.weather[0] ?? {};\n    const data = {\n      weather,\n      city: response.name,\n      country: response.sys.country,\n      temp: response.main.temp,\n      type: (weatherCodes as WeatherCodeTypeMap)[String(weather.id)],\n    };\n    setWeather(data);\n  }, [geoLocation, setWeather]);\n\n  useEffect(() => {\n    if (weather === null) {\n      fetchWeatherData();\n    }\n  }, [fetchWeatherData, weather]);\n\n  useIntervalEffect(() => {\n    fetchWeatherData();\n  }, WEATHER_REFRESH_INTERVAL);\n\n  return weather != null ? weather : null;\n}\n","import { useEffect, useCallback } from 'react';\nimport { useGeoLocation, useStateWithLocalCache } from 'src/hooks';\nimport APIOpenWeather from 'src/api/APIOpenWeather';\nimport { ForecastWeathersData } from 'src/models/Weather';\nimport { FORECAST_WEATHERS_CACHE_EXPIRY as expiry, WEATHER_REFRESH_INTERVAL } from 'src/constants';\nimport { useIntervalEffect } from './useIntervalEffect';\n\nconst FORECAST_WEATHERS_STORAGE_KEY = 'forecast_weathers';\nexport function useForecastWeathers(): ForecastWeathersData[] {\n  const [weathers, setWeathers] = useStateWithLocalCache<ForecastWeathersData[]>(\n    [],\n    FORECAST_WEATHERS_STORAGE_KEY,\n    expiry\n  );\n  const geoLocation = useGeoLocation();\n\n  const fetchForecastWeathers = useCallback(async () => {\n    if (!geoLocation) {\n      return;\n    }\n\n    const response = await APIOpenWeather.fetchForecastWeathersByGeoLocation({\n      lat: geoLocation.coords.latitude,\n      lon: geoLocation.coords.longitude,\n    });\n    const forcastWeathers = response.daily.map(({ weather, temp, dt }) => ({\n      weather: weather[0],\n      temp: (temp.max + temp.min) / 2,\n      date: new Date(dt * 1000).toISOString(),\n    }));\n\n    setWeathers(forcastWeathers);\n  }, [geoLocation, setWeathers]);\n\n  useEffect(() => {\n    if (weathers.length === 0) {\n      fetchForecastWeathers();\n    }\n  }, [fetchForecastWeathers, weathers]);\n\n  useIntervalEffect(() => {\n    fetchForecastWeathers();\n  }, WEATHER_REFRESH_INTERVAL);\n\n  return weathers;\n}\n","import { useMemo } from 'react';\nimport { WeatherType, WeatherPhoto, DayNight } from 'src/models';\nimport DefaultImage from 'src/assets/default-background.jpg';\nimport weatherPhotos from 'src/assets/weather-photos.json';\n\nconst now = new Date();\n\nexport function useWeatherPhoto(weatherType: WeatherType) {\n  const dayNight: DayNight = now.getHours() > 18 ? 'Night' : 'Day';\n  const avilablePhotos = useMemo(() => {\n    return (weatherPhotos as WeatherPhoto[]).filter(photo => {\n      const hasWeather = photo.weathers.some(weather => weather === weatherType);\n      const isMatchedDayNight = photo.dayNight.some(dn => dn === dayNight);\n      return hasWeather && isMatchedDayNight;\n    });\n  }, [dayNight, weatherType]);\n  const randomCount = useMemo(() => Math.floor(Math.random() * avilablePhotos.length), [avilablePhotos]);\n\n  return avilablePhotos.length > 0 ? avilablePhotos[randomCount].image : DefaultImage;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { WeatherData, WeatherType } from 'src/models/Weather';\nimport { useWeatherPhoto } from 'src/hooks';\n\ninterface Props {\n  weather: WeatherData | null;\n}\nconst Background = ({ weather: weatherData }: Props) => {\n  const photo = useWeatherPhoto(weatherData?.type.category ?? WeatherType.알수없음);\n  const windowWidth = window.innerWidth;\n\n  return (\n    <BackgroundWrapper>\n      <BackgroundImage src={`${photo}?fit=crop&w=${windowWidth}&q=80`} />\n    </BackgroundWrapper>\n  );\n};\n\nconst BackgroundWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100vh;\n  overflow: hidden;\n`;\nconst BackgroundImage = styled.img`\n  width: 100%;\n  object-fit: cover;\n`;\n\nexport default Background;\n","import React, { ReactNode } from 'react';\nimport { WidgetProps } from 'src/models';\nimport styled from 'styled-components';\nimport { getCssPosition } from 'src/utils';\n\ninterface Props extends WidgetProps {\n  children: ReactNode;\n}\n\nconst Widget = ({ horizontal, vertical, children }: Props) => {\n  return (\n    <Wrapper horizontal={horizontal} vertical={vertical}>\n      <Inner>{children}</Inner>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div<WidgetProps>`\n  position: absolute;\n  * {\n    color: #ffffff;\n  }\n  ${({ horizontal, vertical }) => getCssPosition({ horizontal, vertical })}\n`;\nconst Inner = styled.div`\n  position: relative;\n`;\n\nexport default Widget;\n","import { WidgetProps } from 'src/models/Widget';\nimport { Position } from 'src/constants';\n\nexport function getCssPosition({ horizontal, vertical }: WidgetProps) {\n  if (horizontal === Position.Center && vertical === Position.Center) {\n    return `\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n    `;\n  }\n\n  let css = '';\n\n  if (horizontal === Position.Left) {\n    css += 'left: 0;';\n  } else if (horizontal === Position.Center) {\n    css += 'left: 50%; transform: translateX(-50%);';\n  } else if (horizontal === Position.Right) {\n    css += 'right: 0;';\n  }\n\n  if (vertical === Position.Top) {\n    css += 'top: 0;';\n  } else if (vertical === Position.Center) {\n    css += 'top: 50%; transform: translateY(-50%);';\n  } else if (vertical === Position.Bottom) {\n    css += 'bottom: 0;';\n  }\n\n  return css;\n}\n","import React, { useEffect, useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { format } from 'date-fns';\nimport Widget from 'src/components/Widgets/Widget';\nimport { WidgetProps } from 'src/models';\n\ninterface Props extends WidgetProps {\n  showDate?: boolean;\n}\n\nconst ClockWidget = ({ horizontal, vertical, showDate = true }: Props) => {\n  const intervalTime = 1000; // 1s\n  const [time, setTime] = useState(new Date());\n  const hours = useMemo(() => format(time, 'HH'), [time]);\n  const minutes = useMemo(() => format(time, 'mm'), [time]);\n  const formattedDate = useMemo(() => {\n    return format(time, 'Y, MMM d');\n  }, [time]);\n\n  const isShowColon = useMemo(() => time.getSeconds() % 2 === 0, [time]);\n\n  useEffect(() => {\n    function updateTime() {\n      setTime(new Date());\n    }\n    const interval = setInterval(updateTime, intervalTime);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return (\n    <Widget horizontal={horizontal} vertical={vertical}>\n      <HourAndSecondView>\n        {hours}\n        <Colon show={isShowColon}>:</Colon>\n        {minutes}\n      </HourAndSecondView>\n      {showDate ? <DateView>{formattedDate}</DateView> : null}\n    </Widget>\n  );\n};\n\nconst HourAndSecondView = styled.div`\n  font-size: 12rem;\n  letter-spacing: 0.1rem;\n`;\nconst Colon = styled.span<{ show: boolean }>`\n  opacity: ${({ show }) => (show ? 1 : 0)};\n  font-weight: lighter;\n  transition: opacity 0.2s ease-in-out;\n  font-size: 10rem;\n`;\nconst DateView = styled.div`\n  font-size: 2rem;\n  text-align: right;\n`;\n\nexport default ClockWidget;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface Props {\n  icon?: string;\n}\nconst WeatherIcon: React.FC<Props> = ({ icon = '' }) => {\n  return icon !== '' ? <Icon src={`http://openweathermap.org/img/wn/${icon}@2x.png`} /> : null;\n};\n\nconst Icon = styled.img`\n  width: 2rem;\n  vertical-align: middle;\n`;\n\nexport default WeatherIcon;\n","import React, { useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useForecastWeathers } from 'src/hooks';\n\nconst GRAPH_MAX_HEIGHT = 30;\n\nconst ForecastGraph = () => {\n  const [todayWeather, ...weathers] = useForecastWeathers();\n  const maxTempDiff = useMemo(() => {\n    return weathers.reduce((result, weather) => {\n      const diff = weather.temp - todayWeather.temp;\n      const abs = Math.abs(diff);\n      return abs > result ? abs : result;\n    }, 0);\n  }, [todayWeather, weathers]);\n\n  const getGraphHeight = useCallback(\n    (temp: number) => {\n      const diff = temp - todayWeather.temp;\n      const abs = Math.abs(diff);\n      return {\n        diff: (abs / maxTempDiff) * (GRAPH_MAX_HEIGHT / 2),\n        isNegative: diff < 0,\n      }\n    },\n    [todayWeather, maxTempDiff]\n  );\n\n  return (\n    <Wrapper>\n      {weathers.map((weather, index) => {\n        const height = getGraphHeight(weather.temp);\n        return <Graph key={index} height={height.diff} isNegative={height.isNegative} />;\n      })}\n    </Wrapper>\n  );\n};\n\nexport default ForecastGraph;\n\nconst Wrapper = styled.div`\n  display: flex;\n  height: ${GRAPH_MAX_HEIGHT}px;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.5rem;\n`;\n\nconst Graph = styled.div<{ height: number; isNegative: boolean; }>`\n  width: ${100 / 7}%;\n  height: ${({ height }) => height}px;\n  transform: translateY(${({ isNegative }) => isNegative ? '-50%' : '50%'});\n  background-color: #fff;\n`;\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { WidgetProps } from 'src/models';\nimport Widget from 'src/components/Widgets/Widget';\nimport { convertTemperature } from 'src/utils';\nimport { TemperatureUnit } from 'src/constants';\nimport { useCurrentWeather } from 'src/hooks';\nimport styled from 'styled-components';\nimport WeatherIcon from 'src/components/WeatherIcon';\nimport { WeatherData } from 'src/models/Weather';\nimport ForecastGraph from './ForecastGraph';\n\ninterface Props extends WidgetProps {\n  onChangeWeather?: (weather: WeatherData | null) => void;\n}\nconst WeatherWidget = ({ horizontal, vertical, onChangeWeather }: Props) => {\n  const weatherData = useCurrentWeather();\n  const [showDescription, setShowDescription] = useState(false);\n  const currentCelsiusTemp = useMemo<number>(() => {\n    if (!weatherData) {\n      return Infinity;\n    }\n    return convertTemperature(weatherData.temp, TemperatureUnit.Celsius);\n  }, [weatherData]);\n\n  useEffect(() => {\n    onChangeWeather?.(weatherData);\n  }, [weatherData, onChangeWeather]);\n\n  if (!weatherData) {\n    return null;\n  }\n\n  return (\n    <Widget horizontal={horizontal} vertical={vertical}>\n      <div onMouseEnter={() => setShowDescription(true)} onMouseLeave={() => setShowDescription(false)}>\n        <WeatherView>\n          <WeatherIcon icon={weatherData.weather.icon} />\n          {weatherData.weather.main}, {currentCelsiusTemp}\n          <small>&#8451;</small>\n        </WeatherView>\n        <ForecastGraph />\n        <LocationView>\n          {weatherData.city}, {weatherData.country}\n        </LocationView>\n      </div>\n      {showDescription && <TooltipDescription>{weatherData.type.description}</TooltipDescription>}\n    </Widget>\n  );\n};\n\nconst WeatherView = styled.div`\n  font-size: 1.5rem;\n  margin-bottom: 0.5rem;\n  text-align: right;\n  small {\n    font-size: 1rem;\n  }\n`;\n\nconst LocationView = styled.div`\n  text-align: right;\n`;\n\nconst TooltipDescription = styled.div`\n  position: absolute;\n  bottom: -10px;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  width: 80%;\n  background-color: rgba(0, 0, 0, 0.6);\n  padding: 0.5rem 1rem;\n  border-radius: 1rem;\n  text-align: center;\n`;\n\nexport default WeatherWidget;\n","import { TemperatureUnit } from 'src/constants';\n\nexport function convertTemperature(temp: number, unit: TemperatureUnit) {\n  if (unit === TemperatureUnit.Celsius) {\n    return Math.round(temp - 273.15);\n  } else if (unit === TemperatureUnit.Fahrenheit) {\n    return Math.round((temp - 273.15) * (9 / 5) + 32);\n  } else {\n    return temp;\n  }\n}\n","import React, { useMemo } from 'react';\nimport Widget from 'src/components/Widgets/Widget';\nimport { WidgetProps } from 'src/models';\nimport { useAirQuality } from 'src/hooks';\nimport styled from 'styled-components';\nimport { getAirQualityName } from 'src/utils';\n\nconst AirQualityWidget = ({ horizontal, vertical }: WidgetProps) => {\n  const aqi = useAirQuality();\n  const qualityName = useMemo<string>(() => {\n    if (!aqi) {\n      return '';\n    }\n\n    return getAirQualityName(aqi.aqi);\n  }, [aqi]);\n\n  if (!aqi) {\n    return null;\n  }\n\n  return (\n    <Widget horizontal={horizontal} vertical={vertical}>\n      <QualityTitle>Air Quality</QualityTitle>\n      <QualityValue>{aqi.aqi}</QualityValue>\n      <QualityName>{qualityName}</QualityName>\n    </Widget>\n  );\n};\n\nconst QualityTitle = styled.div`\n  text-align: center;\n`;\nconst QualityValue = styled.div`\n  font-size: 3rem;\n  text-align: center;\n`;\nconst QualityName = styled.div`\n  text-align: center;\n`;\n\nexport default AirQualityWidget;\n","import { AirQualityName } from 'src/constants';\n\nexport function getAirQualityName(aqi: number): AirQualityName {\n  if (aqi < 51) {\n    return AirQualityName.Good;\n  } else if (aqi < 101) {\n    return AirQualityName.Normal;\n  } else if (aqi < 151) {\n    return AirQualityName.Caution;\n  } else if (aqi < 201) {\n    return AirQualityName.Bad;\n  } else if (aqi < 301) {\n    return AirQualityName.VeryBad;\n  } else if (aqi >= 301) {\n    return AirQualityName.Danger;\n  } else {\n    return AirQualityName.Normal;\n  }\n}\n","import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Position } from 'src/constants';\nimport Background from 'src/components/Background';\nimport ClockWidget from 'src/components/Widgets/Clock';\nimport WeatherWidget from 'src/components/Widgets/Weather';\nimport AirQualityWidget from 'src/components/Widgets/AirQuality';\nimport { WeatherData } from './models';\n\nconst App: React.FC = () => {\n  const [currentWeather, setCurrentWeather] = useState<WeatherData | null>(null);\n  const handleChangeWeather = useCallback((weather: WeatherData | null) => setCurrentWeather(weather), []);\n\n  return (\n    <div className=\"App\">\n      <Background weather={currentWeather} />\n      <Padding>\n        <DisplayBox>\n          <ClockWidget horizontal={Position.Center} vertical={Position.Center} />\n          <WeatherWidget horizontal={Position.Right} vertical={Position.Top} onChangeWeather={handleChangeWeather} />\n          <AirQualityWidget horizontal={Position.Right} vertical={Position.Bottom} />\n        </DisplayBox>\n      </Padding>\n    </div>\n  );\n};\n\nconst Padding = styled.div`\n  position: relative;\n  height: 100vh;\n  box-sizing: border-box;\n  padding: 1rem;\n`;\nconst DisplayBox = styled.div`\n  position: relative;\n  height: 100%;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}